$ python shield.py
AGENT_SIZE 1
workspace_size =  10
acceleration bounds A_MAX = 10
TARGET_RADIUS 1.0
DOING_OBSTACLES False
GEOFENCING False
DOING_BOUNDED True
STEPS_BOUND 3
Building shield for 1 point predator, 2-D
**Warning - not checking for action predicates
initializing node labels and arc labels with given safety properties
strengthened arc label to: And(xX == x + v_x + 1/2*a_x,
    v_xX == v_x + a_x,
    yX == y + v_y + 1/2*a_y,
    v_yX == v_y + a_y,
    tX == 1 + t,
    Or(Not(x == prey_x), Not(y == prey_y), deadlineX == -1))
strengthened node label on node main to And(t >= 0, Or(t <= deadline, deadline == -1))
strengthened arc label to: And(xX == x + v_x + 1/2*a_x,
    v_xX == v_x + a_x,
    yX == y + v_y + 1/2*a_y,
    v_yX == v_y + a_y,
    tX == 1 + t,
    Or(Not(x == prey_x), Not(y == prey_y), deadlineX == -1),
    Or(Not(t == 0), deadlineX == 3 + t))
..done

----------------
iteration 0

-- Refining the state invariant for node main
--- arc: accelerate
ttvts =
 ForAll([xX, yX, v_xX, v_yX, tX, deadlineX],
       Implies(And(xX == x + v_x + 1/2*a_x,
                   v_xX == v_x + a_x,
                   yX == y + v_y + 1/2*a_y,
                   v_yX == v_y + a_y,
                   tX == 1 + t,
                   Or(Not(x == prey_x),
                      Not(y == prey_y),
                      deadlineX == -1),
                   Or(Not(t == 0), deadlineX == 3 + t)),
               And(tX >= 0,
                   Or(tX <= deadlineX, deadlineX == -1))))
ttvts_simp after QE (ttvs_e) =
Or(And(t >= -1, y == prey_y, x == prey_x),
   And(t == 0, t >= -1))
new control Pred:
And(a_x >= -10,
    a_x <= 10,
    a_y >= -10,
    a_y <= 10,
    Or(t == 0, And(y == prey_y, x == prey_x)))
guardDisjunction: Or(False,
   Exists([a_x, a_y],
          And(a_x >= -10,
              a_x <= 10,
              a_y >= -10,
              a_y <= 10,
              Or(t == 0, And(y == prey_y, x == prey_x)))))
guardDisjunction after QE [Or(False,
    And(Or(x == prey_x, t == 0), Or(y == prey_y, t == 0)))]
simplified guard disjunction:
 And(Or(t == 0, x == prey_x), Or(t == 0, y == prey_y))
guardDisjunction And(Or(t == 0, x == prey_x), Or(t == 0, y == prey_y))

- Completed arcs from node main. Now checking if invariant needs updating
stateInv And(t >= 0, Or(t <= deadline, deadline == -1))
newInvDelta: [Or(t == 0, x == prey_x), Or(t == 0, y == prey_y)]
new invariant=
 And(t >= 0,
    Or(t <= deadline, deadline == -1),
    Or(t == 0, x == prey_x),
    Or(t == 0, y == prey_y))
diff_ctrlPred_vs_newStateInv (post updated state inv): And(a_x >= -10, a_x <= 10, a_y >= -10, a_y <= 10)

----------------
iteration 1

-- Refining the state invariant for node main
--- arc: accelerate
ttvts =
 ForAll([xX, yX, v_xX, v_yX, tX, deadlineX],
       Implies(And(xX == x + v_x + 1/2*a_x,
                   v_xX == v_x + a_x,
                   yX == y + v_y + 1/2*a_y,
                   v_yX == v_y + a_y,
                   tX == 1 + t,
                   Or(Not(x == prey_x),
                      Not(y == prey_y),
                      deadlineX == -1),
                   Or(Not(t == 0), deadlineX == 3 + t)),
               And(tX >= 0,
                   Or(tX <= deadlineX, deadlineX == -1),
                   Or(tX == 0, xX == prey_x),
                   Or(tX == 0, yX == prey_y))))
ttvts_simp after QE (ttvs_e) =
Or(And(t == -1, y == prey_y, x == prey_x),
   And(prey_x == x + v_x + 1/2*a_x,
       t == 0,
       prey_y == y + v_y + 1/2*a_y,
       t >= -1),
   And(0 == v_x + 1/2*a_x,
       y == prey_y,
       0 == v_y + 1/2*a_y,
       t >= -1,
       x == prey_x),
   And(x == prey_x, t == 0, y == prey_y))
new control Pred:
And(a_x >= -10,
    a_x <= 10,
    a_y >= -10,
    a_y <= 10,
    Or(And(0 == v_x + 1/2*a_x,
           y == prey_y,
           0 == v_y + 1/2*a_y,
           x == prey_x),
       And(x == prey_x, t == 0, y == prey_y),
       And(prey_x == x + v_x + 1/2*a_x,
           prey_y == y + v_y + 1/2*a_y)))
guardDisjunction: Or(False,
   Exists([a_x, a_y],
          And(a_x >= -10,
              a_x <= 10,
              a_y >= -10,
              a_y <= 10,
              Or(And(0 == v_x + 1/2*a_x,
                     y == prey_y,
                     0 == v_y + 1/2*a_y,
                     x == prey_x),
                 And(x == prey_x, t == 0, y == prey_y),
                 And(prey_x == x + v_x + 1/2*a_x,
                     prey_y == y + v_y + 1/2*a_y)))))
guardDisjunction after QE [Or(False,
    And(Or(y == prey_y, -2*v_x + -2*x + 2*prey_x <= 10),
        Or(-2*v_x + -2*x + 2*prey_x <= 10,
           x == prey_x,
           t == 0),
        Or(v_x >= -5, Not(x == prey_x), t == 0),
        Or(-2*v_y + -2*y + 2*prey_y >= -10,
           x == prey_x,
           t == 0),
        Or(-2*v_y + -2*y + 2*prey_y <= 10,
           x == prey_x,
           t == 0),
        Or(-2*v_x + -2*x + 2*prey_x >= -10,
           x == prey_x,
           t == 0),
        Or(x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10),
        Or(y == prey_y, -2*v_x + -2*x + 2*prey_x >= -10),
        Or(-2*v_x + -2*x + 2*prey_x >= -10,
           Not(y == prey_y),
           t == 0,
           v_y <= 5),
        Or(v_x <= 5, Not(x == prey_x), t == 0),
        Or(y == prey_y, -2*v_y + -2*y + 2*prey_y <= 10),
        Or(v_y >= -5, Not(y == prey_y), t == 0),
        Or(y == prey_y, -2*v_y + -2*y + 2*prey_y >= -10),
        Or(v_y <= 5, Not(y == prey_y), t == 0),
        Or(x == prey_x, -2*v_y + -2*y + 2*prey_y <= 10),
        Or(x == prey_x, -2*v_y + -2*y + 2*prey_y >= -10),
        Or(x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10)))]
simplified guard disjunction:
 And(Or(y == prey_y, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(t == 0, x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(t == 0, Not(x == prey_x), v_x >= -5),
    Or(t == 0, x == prey_x, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(t == 0, x == prey_x, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(t == 0, x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(t == 0,
       Not(y == prey_y),
       -2*v_x + -2*x + 2*prey_x >= -10,
       v_y <= 5),
    Or(t == 0, Not(x == prey_x), v_x <= 5),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(t == 0, Not(y == prey_y), v_y >= -5),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(t == 0, Not(y == prey_y), v_y <= 5),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10))
guardDisjunction And(Or(y == prey_y, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(t == 0, x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(t == 0, Not(x == prey_x), v_x >= -5),
    Or(t == 0, x == prey_x, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(t == 0, x == prey_x, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(t == 0, x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(t == 0,
       Not(y == prey_y),
       -2*v_x + -2*x + 2*prey_x >= -10,
       v_y <= 5),
    Or(t == 0, Not(x == prey_x), v_x <= 5),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(t == 0, Not(y == prey_y), v_y >= -5),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(t == 0, Not(y == prey_y), v_y <= 5),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10))

- Completed arcs from node main. Now checking if invariant needs updating
stateInv And(t >= 0,
    Or(t <= deadline, deadline == -1),
    Or(t == 0, x == prey_x),
    Or(t == 0, y == prey_y))
newInvDelta: [Or(y == prey_y, -2*v_x + -2*x + 2*prey_x <= 10),
 Or(t == 0, v_x >= -5),
 Or(x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10),
 Or(y == prey_y, -2*v_x + -2*x + 2*prey_x >= -10),
 Or(t == 0, v_x <= 5),
 Or(y == prey_y, -2*v_y + -2*y + 2*prey_y <= 10),
 Or(t == 0, v_y >= -5),
 Or(y == prey_y, -2*v_y + -2*y + 2*prey_y >= -10),
 Or(t == 0, v_y <= 5),
 Or(x == prey_x, -2*v_y + -2*y + 2*prey_y <= 10),
 Or(x == prey_x, -2*v_y + -2*y + 2*prey_y >= -10),
 Or(x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10)]
new invariant=
 And(t >= 0,
    Or(t <= deadline, deadline == -1),
    Or(t == 0, x == prey_x),
    Or(t == 0, y == prey_y),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(t == 0, v_x >= -5),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(t == 0, v_x <= 5),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(t == 0, v_y >= -5),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(t == 0, v_y <= 5),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10))
diff_ctrlPred_vs_newStateInv (post updated state inv): And(a_x >= -10,
    a_x <= 10,
    a_y >= -10,
    a_y <= 10,
    Or(And(x == prey_x, t == 0, y == prey_y),
       And(prey_x == x + v_x + 1/2*a_x,
           prey_y == y + v_y + 1/2*a_y)))

----------------
iteration 2

-- Refining the state invariant for node main
--- arc: accelerate
ttvts =
 ForAll([xX, yX, v_xX, v_yX, tX, deadlineX],
       Implies(And(xX == x + v_x + 1/2*a_x,
                   v_xX == v_x + a_x,
                   yX == y + v_y + 1/2*a_y,
                   v_yX == v_y + a_y,
                   tX == 1 + t,
                   Or(Not(x == prey_x),
                      Not(y == prey_y),
                      deadlineX == -1),
                   Or(Not(t == 0), deadlineX == 3 + t)),
               And(tX >= 0,
                   Or(tX <= deadlineX, deadlineX == -1),
                   Or(tX == 0, xX == prey_x),
                   Or(tX == 0, yX == prey_y),
                   Or(yX == prey_y,
                      -2*v_xX + -2*xX + 2*prey_x <= 10),
                   Or(tX == 0, v_xX >= -5),
                   Or(xX == prey_x,
                      -2*v_xX + -2*xX + 2*prey_x >= -10),
                   Or(yX == prey_y,
                      -2*v_xX + -2*xX + 2*prey_x >= -10),
                   Or(tX == 0, v_xX <= 5),
                   Or(yX == prey_y,
                      -2*v_yX + -2*yX + 2*prey_y <= 10),
                   Or(tX == 0, v_yX >= -5),
                   Or(yX == prey_y,
                      -2*v_yX + -2*yX + 2*prey_y >= -10),
                   Or(tX == 0, v_yX <= 5),
                   Or(xX == prey_x,
                      -2*v_yX + -2*yX + 2*prey_y <= 10),
                   Or(xX == prey_x,
                      -2*v_yX + -2*yX + 2*prey_y >= -10),
                   Or(xX == prey_x,
                      -2*v_xX + -2*xX + 2*prey_x <= 10))))
ttvts_simp after QE (ttvs_e) =
Or(And(x == prey_x,
       y == prey_y,
       Not(t == -1),
       t >= -1,
       t == 0),
   And(x == prey_x,
       t == -1,
       y == prey_y,
       -4*v_x + -3*a_x >= -10,
       -4*v_y + -3*a_y <= 10,
       -4*v_x + -3*a_x <= 10,
       -4*v_y + -3*a_y >= -10),
   And(0 == v_y + 1/2*a_y,
       x == prey_x,
       0 == v_x + 1/2*a_x,
       -4*v_y + -3*a_y <= 10,
       -4*v_x + -3*a_x <= 10,
       t == -1,
       y == prey_y),
   And(t == -1,
       x == prey_x,
       0 == v_x + 1/2*a_x,
       -4*v_y + -3*a_y >= -10,
       v_y + a_y <= 5,
       -4*v_x + -3*a_x <= 10,
       y == prey_y,
       0 == v_y + 1/2*a_y),
   And(0 == v_y + 1/2*a_y,
       x == prey_x,
       0 == v_x + 1/2*a_x,
       -4*v_y + -3*a_y >= -10,
       v_x + a_x <= 5,
       -4*v_y + -3*a_y <= 10,
       v_y + a_y <= 5,
       v_y + a_y >= -5,
       -4*v_x + -3*a_x <= 10,
       t >= -1,
       v_x + a_x >= -5,
       y == prey_y),
   And(0 == v_y + 1/2*a_y,
       x == prey_x,
       0 == v_x + 1/2*a_x,
       -4*v_y + -3*a_y <= 10,
       t == -1,
       y == prey_y),
   And(t == -1,
       x == prey_x,
       0 == v_x + 1/2*a_x,
       -4*v_y + -3*a_y >= -10,
       v_y + a_y <= 5,
       y == prey_y,
       0 == v_y + 1/2*a_y),
   And(prey_y == y + v_y + 1/2*a_y,
       t == 0,
       prey_x == x + v_x + 1/2*a_x,
       -4*v_y + -3*a_y + -2*y + 2*prey_y >= -10,
       v_x + a_x <= 5,
       -4*v_y + -3*a_y + -2*y + 2*prey_y <= 10,
       v_y + a_y <= 5,
       v_y + a_y >= -5,
       -4*v_x + -3*a_x + -2*x + 2*prey_x <= 10,
       t >= -1,
       v_x + a_x >= -5))
new control Pred:
And(a_x >= -10,
    a_x <= 10,
    a_y >= -10,
    a_y <= 10,
    Or(And(x == prey_x, y == prey_y, t == 0),
       And(0 == v_y + 1/2*a_y,
           x == prey_x,
           0 == v_x + 1/2*a_x,
           y == prey_y),
       And(prey_y == y + v_y + 1/2*a_y,
           prey_x == x + v_x + 1/2*a_x,
           v_x + a_x <= 5,
           v_y + a_y <= 5,
           v_y + a_y >= -5,
           v_x + a_x >= -5)))
guardDisjunction: Or(False,
   Exists([a_x, a_y],
          And(a_x >= -10,
              a_x <= 10,
              a_y >= -10,
              a_y <= 10,
              Or(And(x == prey_x, y == prey_y, t == 0),
                 And(0 == v_y + 1/2*a_y,
                     x == prey_x,
                     0 == v_x + 1/2*a_x,
                     y == prey_y),
                 And(prey_y == y + v_y + 1/2*a_y,
                     prey_x == x + v_x + 1/2*a_x,
                     v_x + a_x <= 5,
                     v_y + a_y <= 5,
                     v_y + a_y >= -5,
                     v_x + a_x >= -5)))))
guardDisjunction after QE [Or(False,
    And(Or(-2*v_x + -2*x + 2*prey_x <= 10,
           -1*v_x + -2*x + 2*prey_x >= -5,
           y == prey_y),
        Or(-2*v_x + -2*x + 2*prey_x <= 10,
           -1*v_x + -2*x + 2*prey_x >= -5,
           x == prey_x),
        Or(x == prey_x, -1*v_x + -2*x + 2*prey_x >= -5),
        Or(x == prey_x, -1*v_y + -2*y + 2*prey_y >= -5),
        Or(y == prey_y, -1*v_x + -2*x + 2*prey_x <= 5),
        Or(y == prey_y, -2*v_y + -2*y + 2*prey_y >= -10),
        Or(y == prey_y, -2*v_x + -2*x + 2*prey_x <= 10),
        Or(y == prey_y, -2*v_y + -2*y + 2*prey_y <= 10),
        Or(y == prey_y, -1*v_y + -2*y + 2*prey_y <= 5),
        Or(v_x >= -5, Not(x == prey_x), t == 0),
        Or(x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10),
        Or(x == prey_x, -1*v_y + -2*y + 2*prey_y <= 5),
        Or(y == prey_y, -2*v_x + -2*x + 2*prey_x >= -10),
        Or(y == prey_y, -1*v_y + -2*y + 2*prey_y >= -5),
        Or(-2*v_x + -2*x + 2*prey_x >= -10,
           -1*v_x + -2*x + 2*prey_x <= 5,
           x == prey_x),
        Or(x == prey_x, -1*v_x + -2*x + 2*prey_x <= 5),
        Or(x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10),
        Or(v_y <= 5, Not(y == prey_y), t == 0),
        Or(v_y >= -5,
           Not(y == prey_y),
           t == 0,
           -2*v_x + -2*x + 2*prey_x >= -10),
        Or(v_y >= -5, Not(y == prey_y), t == 0),
        Or(v_x <= 5, Not(x == prey_x), t == 0)))]
simplified guard disjunction:
 And(Or(y == prey_y,
       -2*v_x + -2*x + 2*prey_x <= 10,
       -1*v_x + -2*x + 2*prey_x >= -5),
    Or(x == prey_x,
       -2*v_x + -2*x + 2*prey_x <= 10,
       -1*v_x + -2*x + 2*prey_x >= -5),
    Or(x == prey_x, -1*v_x + -2*x + 2*prey_x >= -5),
    Or(x == prey_x, -1*v_y + -2*y + 2*prey_y >= -5),
    Or(y == prey_y, -1*v_x + -2*x + 2*prey_x <= 5),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(y == prey_y, -1*v_y + -2*y + 2*prey_y <= 5),
    Or(t == 0, Not(x == prey_x), v_x >= -5),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(x == prey_x, -1*v_y + -2*y + 2*prey_y <= 5),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(y == prey_y, -1*v_y + -2*y + 2*prey_y >= -5),
    Or(x == prey_x,
       -2*v_x + -2*x + 2*prey_x >= -10,
       -1*v_x + -2*x + 2*prey_x <= 5),
    Or(x == prey_x, -1*v_x + -2*x + 2*prey_x <= 5),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(t == 0, Not(y == prey_y), v_y <= 5),
    Or(t == 0,
       Not(y == prey_y),
       -2*v_x + -2*x + 2*prey_x >= -10,
       v_y >= -5),
    Or(t == 0, Not(y == prey_y), v_y >= -5),
    Or(t == 0, Not(x == prey_x), v_x <= 5))
guardDisjunction And(Or(y == prey_y,
       -2*v_x + -2*x + 2*prey_x <= 10,
       -1*v_x + -2*x + 2*prey_x >= -5),
    Or(x == prey_x,
       -2*v_x + -2*x + 2*prey_x <= 10,
       -1*v_x + -2*x + 2*prey_x >= -5),
    Or(x == prey_x, -1*v_x + -2*x + 2*prey_x >= -5),
    Or(x == prey_x, -1*v_y + -2*y + 2*prey_y >= -5),
    Or(y == prey_y, -1*v_x + -2*x + 2*prey_x <= 5),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(y == prey_y, -1*v_y + -2*y + 2*prey_y <= 5),
    Or(t == 0, Not(x == prey_x), v_x >= -5),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(x == prey_x, -1*v_y + -2*y + 2*prey_y <= 5),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(y == prey_y, -1*v_y + -2*y + 2*prey_y >= -5),
    Or(x == prey_x,
       -2*v_x + -2*x + 2*prey_x >= -10,
       -1*v_x + -2*x + 2*prey_x <= 5),
    Or(x == prey_x, -1*v_x + -2*x + 2*prey_x <= 5),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(t == 0, Not(y == prey_y), v_y <= 5),
    Or(t == 0,
       Not(y == prey_y),
       -2*v_x + -2*x + 2*prey_x >= -10,
       v_y >= -5),
    Or(t == 0, Not(y == prey_y), v_y >= -5),
    Or(t == 0, Not(x == prey_x), v_x <= 5))

- Completed arcs from node main. Now checking if invariant needs updating
stateInv And(t >= 0,
    Or(t <= deadline, deadline == -1),
    Or(t == 0, x == prey_x),
    Or(t == 0, y == prey_y),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(t == 0, v_x >= -5),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(t == 0, v_x <= 5),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(t == 0, v_y >= -5),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(t == 0, v_y <= 5),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10))
newInvDelta: [Or(x == prey_x, -1*v_x + -2*x + 2*prey_x >= -5),
 Or(y == prey_y, -1*v_y + -2*y + 2*prey_y <= 5),
 Or(y == prey_y, -1*v_y + -2*y + 2*prey_y >= -5),
 Or(x == prey_x, -1*v_x + -2*x + 2*prey_x <= 5)]
new invariant=
 And(t >= 0,
    Or(t <= deadline, deadline == -1),
    Or(t == 0, x == prey_x),
    Or(t == 0, y == prey_y),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(t == 0, v_x >= -5),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(t == 0, v_x <= 5),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(t == 0, v_y >= -5),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(t == 0, v_y <= 5),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(x == prey_x, -1*v_x + -2*x + 2*prey_x >= -5),
    Or(y == prey_y, -1*v_y + -2*y + 2*prey_y <= 5),
    Or(y == prey_y, -1*v_y + -2*y + 2*prey_y >= -5),
    Or(x == prey_x, -1*v_x + -2*x + 2*prey_x <= 5))
diff_ctrlPred_vs_newStateInv (post updated state inv): And(a_x >= -10,
    a_x <= 10,
    a_y >= -10,
    a_y <= 10,
    Or(And(prey_y == y + v_y + 1/2*a_y,
           prey_x == x + v_x + 1/2*a_x),
       And(x == prey_x, y == prey_y, t == 0)))

----------------
iteration 3

-- Refining the state invariant for node main
--- arc: accelerate
ttvts =
 ForAll([xX, yX, v_xX, v_yX, tX, deadlineX],
       Implies(And(xX == x + v_x + 1/2*a_x,
                   v_xX == v_x + a_x,
                   yX == y + v_y + 1/2*a_y,
                   v_yX == v_y + a_y,
                   tX == 1 + t,
                   Or(Not(x == prey_x),
                      Not(y == prey_y),
                      deadlineX == -1),
                   Or(Not(t == 0), deadlineX == 3 + t)),
               And(tX >= 0,
                   Or(tX <= deadlineX, deadlineX == -1),
                   Or(tX == 0, xX == prey_x),
                   Or(tX == 0, yX == prey_y),
                   Or(yX == prey_y,
                      -2*v_xX + -2*xX + 2*prey_x <= 10),
                   Or(tX == 0, v_xX >= -5),
                   Or(xX == prey_x,
                      -2*v_xX + -2*xX + 2*prey_x >= -10),
                   Or(yX == prey_y,
                      -2*v_xX + -2*xX + 2*prey_x >= -10),
                   Or(tX == 0, v_xX <= 5),
                   Or(yX == prey_y,
                      -2*v_yX + -2*yX + 2*prey_y <= 10),
                   Or(tX == 0, v_yX >= -5),
                   Or(yX == prey_y,
                      -2*v_yX + -2*yX + 2*prey_y >= -10),
                   Or(tX == 0, v_yX <= 5),
                   Or(xX == prey_x,
                      -2*v_yX + -2*yX + 2*prey_y <= 10),
                   Or(xX == prey_x,
                      -2*v_yX + -2*yX + 2*prey_y >= -10),
                   Or(xX == prey_x,
                      -2*v_xX + -2*xX + 2*prey_x <= 10),
                   Or(xX == prey_x,
                      -1*v_xX + -2*xX + 2*prey_x >= -5),
                   Or(yX == prey_y,
                      -1*v_yX + -2*yX + 2*prey_y <= 5),
                   Or(yX == prey_y,
                      -1*v_yX + -2*yX + 2*prey_y >= -5),
                   Or(xX == prey_x,
                      -1*v_xX + -2*xX + 2*prey_x <= 5))))
ttvts_simp after QE (ttvs_e) =
Or(And(t == -1,
       x == prey_x,
       0 == v_x + 1/2*a_x,
       -3*v_y + -2*a_y >= -5,
       v_y + a_y <= 5,
       0 == v_y + 1/2*a_y,
       y == prey_y),
   And(x == prey_x,
       t == -1,
       y == prey_y,
       -3*v_x + -2*a_x <= 5,
       -3*v_x + -2*a_x >= -5,
       -4*v_y + -3*a_y <= 10,
       -3*v_y + -2*a_y <= 5,
       -4*v_x + -3*a_x >= -10,
       v_y + a_y <= 5,
       -4*v_y + -3*a_y >= -10,
       -4*v_x + -3*a_x <= 10,
       -3*v_y + -2*a_y >= -5),
   And(t == -1,
       0 == v_y + 1/2*a_y,
       y == prey_y,
       -3*v_x + -2*a_x <= 5,
       x == prey_x,
       0 == v_x + 1/2*a_x),
   And(x == prey_x,
       t == -1,
       y == prey_y,
       -3*v_x + -2*a_x <= 5,
       -3*v_x + -2*a_x >= -5,
       -4*v_y + -3*a_y <= 10,
       -3*v_y + -2*a_y <= 5,
       -4*v_x + -3*a_x >= -10,
       -4*v_y + -3*a_y >= -10,
       -4*v_x + -3*a_x <= 10,
       -3*v_y + -2*a_y >= -5),
   And(0 == v_x + 1/2*a_x,
       0 == v_y + 1/2*a_y,
       y == prey_y,
       -3*v_x + -2*a_x <= 5,
       v_x + a_x >= -5,
       v_y + a_y <= 5,
       v_y + a_y >= -5,
       t >= -1,
       v_x + a_x <= 5,
       -3*v_y + -2*a_y >= -5,
       x == prey_x),
   And(t == -1,
       x == prey_x,
       0 == v_x + 1/2*a_x,
       y == prey_y,
       0 == v_y + 1/2*a_y),
   And(prey_x == x + v_x + 1/2*a_x,
       t == 0,
       prey_y == y + v_y + 1/2*a_y,
       -3*v_x + -2*a_x + -2*x + 2*prey_x <= 5,
       v_x + a_x >= -5,
       v_y + a_y <= 5,
       v_y + a_y >= -5,
       t >= -1,
       v_x + a_x <= 5,
       -3*v_y + -2*a_y + -2*y + 2*prey_y >= -5),
   And(t == 0, y == prey_y, x == prey_x, t >= -1))
guardDisjunction: Or(False,
   Exists([a_x, a_y],
          And(a_x >= -10,
              a_x <= 10,
              a_y >= -10,
              a_y <= 10,
              Or(And(prey_y == y + v_y + 1/2*a_y,
                     prey_x == x + v_x + 1/2*a_x),
                 And(x == prey_x, y == prey_y, t == 0)))))
guardDisjunction after QE [Or(False,
    And(Or(t == 0, -2*v_y + -2*y + 2*prey_y >= -10),
        Or(t == 0, -2*v_x + -2*x + 2*prey_x <= 10),
        Or(t == 0, -2*v_x + -2*x + 2*prey_x >= -10),
        Or(t == 0, -2*v_y + -2*y + 2*prey_y <= 10),
        Or(y == prey_y, -2*v_x + -2*x + 2*prey_x >= -10),
        Or(x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10),
        Or(y == prey_y, -2*v_x + -2*x + 2*prey_x <= 10),
        Or(x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10),
        Or(y == prey_y, -2*v_y + -2*y + 2*prey_y <= 10),
        Or(y == prey_y, -2*v_y + -2*y + 2*prey_y >= -10),
        Or(x == prey_x, -2*v_y + -2*y + 2*prey_y >= -10),
        Or(x == prey_x, -2*v_y + -2*y + 2*prey_y <= 10)))]
simplified guard disjunction:
 And(Or(t == 0, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(t == 0, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(t == 0, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(t == 0, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y <= 10))
guardDisjunction And(Or(t == 0, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(t == 0, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(t == 0, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(t == 0, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y <= 10))

- Completed arcs from node main. Now checking if invariant needs updating
stateInv And(t >= 0,
    Or(t <= deadline, deadline == -1),
    Or(t == 0, x == prey_x),
    Or(t == 0, y == prey_y),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(t == 0, v_x >= -5),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x >= -10),
    Or(t == 0, v_x <= 5),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(t == 0, v_y >= -5),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(t == 0, v_y <= 5),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(x == prey_x, -1*v_x + -2*x + 2*prey_x >= -5),
    Or(y == prey_y, -1*v_y + -2*y + 2*prey_y <= 5),
    Or(y == prey_y, -1*v_y + -2*y + 2*prey_y >= -5),
    Or(x == prey_x, -1*v_x + -2*x + 2*prey_x <= 5))
newInvDelta: []
no change to invariant on main

----------------
Final Model - fixpoint at iteration 4
Node: main
  Vars: [x, y, v_x, v_y, t, deadline]
  Node Invariant: t >= 0
Transition: accelerate
   0   a_x >= -10
   1   a_x <= 10
   2   a_y >= -10
   3   a_y <= 10
   4   Or(And(prey_y == y + v_y + 1/2*a_y,
       prey_x == x + v_x + 1/2*a_x),
   And(x == prey_x, y == prey_y, t == 0))
   5   xX == x + v_x + 1/2*a_x
   6   v_xX == v_x + a_x
   7   yX == y + v_y + 1/2*a_y
   8   v_yX == v_y + a_y
   9   tX == 1 + t
   10   Or(Not(x == prey_x), Not(y == prey_y), deadlineX == -1)
   11   Or(Not(t == 0), deadlineX == 3 + t)

..safety shield construction complete




And(t >= 0,
    Or(t <= deadline, deadline == -1),

    Or(t == 0, v_x >= -5),
    Or(t == 0, x == prey_x),
    Or(t == 0, v_x <= 5),

    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x >= -10), <<< x != prey_x --> x + v_x - prey_x <= 5
    Or(x == prey_x, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(x == prey_x, -1*v_x + -2*x + 2*prey_x >= -5),  <<< x!=prey_x --> x + 1/2 v_x - prey_x <= 2.5
    Or(x == prey_x, -1*v_x + -2*x + 2*prey_x <= 5),

    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x <= 10),
    Or(y == prey_y, -2*v_x + -2*x + 2*prey_x >= -10),

    Or(t == 0, y == prey_y),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(x == prey_x, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y <= 10),
    Or(t == 0, v_y >= -5),
    Or(y == prey_y, -2*v_y + -2*y + 2*prey_y >= -10),
    Or(t == 0, v_y <= 5),
    Or(y == prey_y, -1*v_y + -2*y + 2*prey_y <= 5),
    Or(y == prey_y, -1*v_y + -2*y + 2*prey_y >= -5),


Or(And(prey_y == y + v_y + 1/2*a_y,
       prey_x == x + v_x + 1/2*a_x),
   And(x == prey_x, y == prey_y, t == 0))
Or(Not(x == prey_x), Not(y == prey_y), deadlineX == -1)
Or(Not(t == 0), deadlineX == 3 + t)
